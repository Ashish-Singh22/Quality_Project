# worker_picker_kpi.py
import pandas as pd
import numpy as np

def process_quality_file(file_stream):
    try: 
        # -*- coding: utf-8 -*-
        """Quality_Inspection.ipynb

        Automatically generated by Colab.

        Original file is located at
            https://colab.research.google.com/drive/1r72lJIKDGu1qT-hlurbckAS-JzyzNadX
        """

        # # Step 1: Upload the Excel file
        # from google.colab import files
        # uploaded = files.upload()
        # # Step 2: Read the Excel file using pandas
        # import pandas as pd

        # # Get the uploaded file name
        # filename = list(uploaded.keys())[0]
        import json

        def to_serializable(obj):
            if isinstance(obj, (np.integer,)):
                return int(obj)
            elif isinstance(obj, (np.floating,)):
                return float(obj)
            elif pd.isna(obj):
                return None
            else:
                return obj

        def make_serializable_list(data_list):
            result = []
            for item in data_list:
                result.append({
                    "week": to_serializable(item["week"]),
                    "month": to_serializable(item["month"]),
                    "claim_status": to_serializable(item["claim_status"]),
                    "data": {
                        str(k): [to_serializable(i) for i in v]
                        for k, v in item["data"].items()
                    }
                })
            return result

        # Load Excel file into a DataFrame
        dpmo_data = pd.read_excel(file_stream)
        # dpmo_data.head()  # Show the first few rows

        # import pandas as pd

        month_mapping = {
            'Jan': 1, 'Feb': 2, 'Mar': 3, 'April': 4,
            'May': 5, 'June': 6, 'July': 7, 'Aug': 8,
            'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12
        }

        # Case-insensitive regex using (?i)
        dpmo_data[['Month_Name', 'Week_Number']] = dpmo_data['Month'].str.extract(r'(?i)(\w+)\s+week\s+(\d+)', expand=True)

        # Normalize Month_Name capitalization for mapping
        dpmo_data['Month_Name'] = dpmo_data['Month_Name'].str.capitalize()

        # Map and convert
        dpmo_data['Month_Value'] = dpmo_data['Month_Name'].map(month_mapping)
        dpmo_data['Week_Value'] = (
            pd.to_numeric(dpmo_data['Week_Number'], errors='coerce')
            .apply(lambda x: int(x) if pd.notna(x) else None)
        )


        dpmo_data

        type_of_claim_data = {}

        for index,row in dpmo_data.iterrows():
            key_dict = (row['Week_Value'],row['Month_Value'],row['Claim Status by Quality'])
            if key_dict in type_of_claim_data:
                if row['Type of Claim'] in type_of_claim_data[key_dict]:
                    type_of_claim_data[key_dict][row['Type of Claim']][0]+=1
                    type_of_claim_data[key_dict][row['Type of Claim']][1]+=row['Quantity under Claim']
                    type_of_claim_data[key_dict][row['Type of Claim']][2]+=row['Total Claim Value (In Rs)']
                else:
                    type_of_claim_data[key_dict][row['Type of Claim']] = [1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']]
            else:
                type_of_claim_data[key_dict] = {row['Type of Claim']:[1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']]}

        type_of_claim_list = []

        for key,value in type_of_claim_data.items():
            type_of_claim_list.append({
                "week":key[0],
                "month":key[1],
                "claim_status":key[2],
                "data":value
            })

        # type_of_claim_list

        customer_name_data = {}

        for index,row in dpmo_data.iterrows():
            key_dict = (row['Week_Value'],row['Month_Value'],row['Claim Status by Quality'])
            if key_dict in customer_name_data:
                if row['Customer Name'] in customer_name_data[key_dict]:
                    customer_name_data[key_dict][row['Customer Name']][0]+=1
                    customer_name_data[key_dict][row['Customer Name']][1]+=row['Quantity under Claim']
                    customer_name_data[key_dict][row['Customer Name']][2]+=row['Total Claim Value (In Rs)']
                else:
                    customer_name_data[key_dict][row['Customer Name']] = [1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']]
            else:
                customer_name_data[key_dict] = {row['Customer Name']:[1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']]}

        customer_name_list = []

        for key,value in customer_name_data.items():
            customer_name_list.append({
                "week":key[0],
                "month":key[1],
                "claim_status":key[2],
                "data":value
            })

        # customer_name_list

        customer_type_data = {}

        for index,row in dpmo_data.iterrows():
            key_dict = (row['Week_Value'],row['Month_Value'],row['Claim Status by Quality'])
            if key_dict in customer_type_data:
                if row['Customer Type'] in customer_type_data[key_dict]:
                    customer_type_data[key_dict][row['Customer Type']][0]+=1
                    customer_type_data[key_dict][row['Customer Type']][1]+=row['Quantity under Claim']
                    customer_type_data[key_dict][row['Customer Type']][2]+=row['Total Claim Value (In Rs)']
                else:
                    customer_type_data[key_dict][row['Customer Type']] = [1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']]
            else:
                customer_type_data[key_dict] = {row['Customer Type']:[1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']]}

        customer_type_list = []

        for key,value in customer_type_data.items():
            customer_type_list.append({
                "week":key[0],
                "month":key[1],
                "claim_status":key[2],
                "data":value
            })

        # customer_type_list

        claim_responsibility_data = {}

        for index,row in dpmo_data.iterrows():
            key_dict = (row['Week_Value'],row['Month_Value'],row['Claim Status by Quality'])
            if key_dict in claim_responsibility_data:
                if row['Claim responsibility'] in claim_responsibility_data[key_dict]:
                    claim_responsibility_data[key_dict][row['Claim responsibility']][0]+=1
                    claim_responsibility_data[key_dict][row['Claim responsibility']][1]+=row['Quantity under Claim']
                    claim_responsibility_data[key_dict][row['Claim responsibility']][2]+=row['Total Claim Value (In Rs)']
                else:
                    claim_responsibility_data[key_dict][row['Claim responsibility']] = [1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']]
            else:
                claim_responsibility_data[key_dict] = {row['Claim responsibility']:[1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']]}

        claim_responsibility_list = []

        for key,value in claim_responsibility_data.items():
            claim_responsibility_list.append({
                "week":key[0],
                "month":key[1],
                "claim_status":key[2],
                "data":value
            })

        # claim_responsibility_list

        part_or_filter_data = {}

        for index,row in dpmo_data.iterrows():
            key_dict = (row['Week_Value'],row['Month_Value'],row['Claim Status by Quality'])
            if key_dict in part_or_filter_data:
                if row['Part/FLT'] in part_or_filter_data[key_dict]:
                    part_or_filter_data[key_dict][row['Part/FLT']][0]+=1
                    part_or_filter_data[key_dict][row['Part/FLT']][1]+=row['Quantity under Claim']
                    part_or_filter_data[key_dict][row['Part/FLT']][2]+=row['Total Claim Value (In Rs)']
                else:
                    part_or_filter_data[key_dict][row['Part/FLT']] = [1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']]
            else:
                part_or_filter_data[key_dict] = {row['Part/FLT']:[1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']]}

        part_or_filter_list = []

        for key,value in part_or_filter_data.items():
            part_or_filter_list.append({
                "week":key[0],
                "month":key[1],
                "claim_status":key[2],
                "data":value
            })

        # part_or_filter_list


        return {
            'success': True,
            'data': {
                'toc_data': make_serializable_list(type_of_claim_list),
                'cn_data': make_serializable_list(customer_name_list),
                'ct_data': make_serializable_list(customer_type_list),
                'cr_data': make_serializable_list(claim_responsibility_list),
                'pft_data': make_serializable_list(part_or_filter_list)
            }
        }

    except Exception as e:
        return {'success': False, 'message': str(e)}
        